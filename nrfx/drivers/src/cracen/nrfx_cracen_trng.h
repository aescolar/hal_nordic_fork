/**
 * Copyright (c) 2025, Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef NRFX_CRACEN_TRNG_H
#define NRFX_CRACEN_TRNG_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stddef.h>
#include <stdint.h>

/**
 * @brief Fill a buffer with entropy from the CRACEN TRNG
 *
 * When this function returns 0, \p size random bytes have been written to \p p_buf.
 *
 * Up to 64 bytes can be requested.
 * If more is requested the function will return -2 without copying any data
 *
 * The entropy generated by this function is NIST800-90B and AIS31 compliant, and can be used to
 * seed FIPS 140-2 compliant pseudo random number generators.
 *
 * @param[out] p_buf Buffer into which to copy \p size bytes of entropy
 * @param[in]  size  Number of bytes to copy
 *
 * @return 0 on success, a negative value on error
 *
 * @note This function is blocking. It will take around a couple of tenths of microseconds to
 *       complete depending on the amount of bytes requested.
 *       (~40 microseconds for an nRF54L15 the maximum 64bytes)
 *
 * @note Note this is a quite power hungry operation.
 *
 * @note This function will enable and configure the CRACEN TRNG HW, wait until the entropy has been
 *       generated, copy it to the destination buffer and disable the HW.
 *       This function is meant as as internal utility of this driver but may be used by others with
 *       extra care, specially if some other component is using CRACEN.
 *       It may not be used if any other component is using the CRACEN TRNG at the same time.
 *
 * @note This function is not reentrant.
 */
int nrfx_cracen_rng_get_entropy(uint8_t *p_buf, size_t size);

#ifdef __cplusplus
}
#endif

#endif /* NRFX_CRACEN_TRNG_H */
